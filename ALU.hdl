CHIP ALU {
    IN  
        x[16], y[16],  
        zx, 
        nx, 
        zy, 
        ny, 
        f,  
        no; 

    OUT 
        out[16], 
        zr, 
        ng; 

    PARTS:
   //form x input to ALU
   Not(in=zx, out=zxNot);
   And16(a[0]=zxNot, a[1]=zxNot, a[2]=zxNot,a[3]=zxNot,a[4]=zxNot,a[5]=zxNot,a[6]=zxNot,a[7]=zxNot,a[8]=zxNot,a[9]=zxNot,a[10]=zxNot,a[11]=zxNot, a[12]=zxNot,a[13]=zxNot,a[14]=zxNot,a[15]=zxNot, b=x, out=zxNotAndx);   
   
   Not16(in=zxNotAndx, out=zxOrNotx);
   Xor16(a[0]=nx, a[1]=nx, a[2]=nx,a[3]=nx,a[4]=nx,a[5]=nx,a[6]=nx,a[7]=nx,a[8]=nx,a[9]=nx,a[10]=nx,a[11]=nx, a[12]=nx,a[13]=nx,a[14]=nx,a[15]=nx, b=zxNotAndx, out=xInALU);
  
   //form y input to ALU
   Not(in=zy, out=zyNot);
   And16(a[0]=zyNot, a[1]=zyNot, a[2]=zyNot,a[3]=zyNot,a[4]=zyNot,a[5]=zyNot,a[6]=zyNot,a[7]=zyNot,a[8]=zyNot,a[9]=zyNot,a[10]=zyNot,a[11]=zyNot, a[12]=zyNot,a[13]=zyNot,a[14]=zyNot,a[15]=zyNot, b=y, out=zyNotAndx);   
   
   Not16(in=zyNotAndx, out=zyOrNotx);
   Xor16(a[0]=ny, a[1]=ny, a[2]=ny,a[3]=ny,a[4]=ny,a[5]=ny,a[6]=ny,a[7]=ny,a[8]=ny,a[9]=ny,a[10]=ny,a[11]=ny, a[12]=ny,a[13]=ny,a[14]=ny,a[15]=ny, b=zyNotAndx, out=yInALU);

   //ALU
   Add16(a=xInALU, b=yInALU, out=AddOut);
   And16(a=xInALU, b=yInALU, out=AndOut);
   Mux16(a=AndOut,b=AddOut,sel=f,out=ALUout);

   //negate ALU out?
   Not16(in=ALUout, out=NotALUout);
   Xor16(a=ALUout,b[0]=no, b[1]=no, b[2]=no,b[3]=no,b[4]=no,b[5]=no,b[6]=no,b[7]=no,b[8]=no,b[9]=no,b[10]=no,b[11]=no, b[12]=no,b[13]=no,b[14]=no,b[15]=no, out[0..7]=outlsb, out[8..15]=outmsb, out[15]=ng, out=out);

   //form zr
   Or8Way(in=outlsb, out=zrInA);
   Or8Way(in=outmsb, out=zrInB);
   Or(a=zrInA, b=zrInB, out=zrNot);
   Not(in=zrNot, out=zr);
}
